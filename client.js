class Client{constructor(){this.storage=localStorage,this.initializeStorage()}initializeStorage(){const t=this.storage.getItem("dbData")||"{}",e=JSON.parse(t);this.storage.setItem("dbData",JSON.stringify(e))}async get(t){try{const e=this.storage.getItem("dbData");if(!e)return await this.initializeStorage(),null;return JSON.parse(e)[t]}catch(t){return`Error getting value for key: ${t.message}`}}async set(t,e){try{const r=this.storage.getItem("dbData")||"{}",s=JSON.parse(r);s[t]=e,this.storage.setItem("dbData",JSON.stringify(s))}catch(t){return`Error setting key-value pair: ${t.message}`}}async delete(t){try{const e=this.storage.getItem("dbData");if(!e)return await this.initializeStorage(),null;const r=JSON.parse(e);delete r[t],this.storage.setItem("dbData",JSON.stringify(r))}catch(t){return`Error deleting key: ${t.message}`}}async list(t=""){try{const e=this.storage.getItem("dbData");if(!e)return await this.initializeStorage(),[];const r=JSON.parse(e),s=Object.keys(r),a=t?s.filter((e=>e.startsWith(t))):s;return Promise.resolve(a)}catch(t){return Promise.reject(new Error(`Error listing keys: ${t.message}`))}}}